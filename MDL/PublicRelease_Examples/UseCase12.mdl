# Binary data model
# PharmML Type1 equation for INDIVIDUAL_VARIABLES
# inverse-logit transformation applied in MODEL_PREDICTION
# link=identity in OBSERVATION definition

Binary_dat = dataObj{
   DECLARED_VARIABLES{ Y withCategories{none, event} }
	
   DATA_INPUT_VARIABLES{
      ID:{ use is id }
	  TIME:{ use is ignore } # NOT USED IN MODEL
      CP:{ use is idv }
      DV:{ use is dv, define={ Y.none when 0, Y.event when 1} }
      MDV:{ use is mdv }
   }# end DATA_INPUT_VARIABLES

   	SOURCE {
	    srdFile : {file = "binary.csv", 
        	inputFormat is nonmemFormat }
	} # end SOURCE
} # end data object

Binary_par = parObj{
   STRUCTURAL{
      #THETA
      POP_BASEP:{value=.1,lo=.01,hi=.99}
      POP_BETA:{value=.5,lo=0,hi=10}
   }# end STRUCTURAL

   VARIABILITY{
      #OMEGA
      PPV_EVENT:{value=0.04 ,type is var}
   }# end VARIABILITY

} # end of parameter object

Bernoulli_DIST_mdl = mdlObj{
   IDV{ CP }

   VARIABILITY_LEVELS{
	ID : { level=2, type is parameter }
	DV : { level=1, type is observation }
   }

   STRUCTURAL_PARAMETERS{
      POP_BASEP
      POP_BETA
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
      PPV_EVENT
   }# end VARIABILITY_PARAMETERS


   RANDOM_VARIABLE_DEFINITION(level=ID){
      eta_PPV_EVENT ~ Normal(mean=0, var=PPV_EVENT )
   }# end RANDOM_VARIABLE_DEFINITION
 
   INDIVIDUAL_VARIABLES{
      indiv_BASE : {type is linear, pop= POP_BASEP, ranEff=[eta_PPV_EVENT], trans is logit }
   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
  	  LP = logit(indiv_BASE) + POP_BETA*CP
	  P1 = invLogit(LP)
   }# end MODEL_PREDICTION

	RANDOM_VARIABLE_DEFINITION(level=DV){
		Y withCategories {none, event}   ~ Bernoulli1(probability=P1)
	}

   OBSERVATION{
     :: {type is discrete, variable = Y }
   }# end ESTIMATION
} # end of model object

Binary_task = taskObj{
	ESTIMATE{ 
		set algo is saem
	}
}# end of task object

Bernoulli_DIST_mog = mogObj {
	OBJECTS{
		Binary_dat : { type is dataObj }
		Bernoulli_DIST_mdl : { type is mdlObj }
		Binary_par : { type is parObj }
		Binary_task : { type is taskObj }
	}
}
